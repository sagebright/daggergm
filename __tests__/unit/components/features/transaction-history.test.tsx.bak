/**
 * @vitest-environment jsdom
 */
import { render, screen, waitFor } from '@testing-library/react'
import { describe, it, expect, vi, beforeEach } from 'vitest'

import { TransactionHistory } from '@/components/features/credits/TransactionHistory'
import * as creditManager from '@/lib/credits/credit-manager'

// Mock credit manager
vi.mock('@/lib/credits/credit-manager')

describe('TransactionHistory Component', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('Display', () => {
    it('should render transaction list', async () => {
      const mockTransactions = [
        {
          id: '1',
          type: 'credit_added',
          credit_type: 'adventure',
          amount: 5,
          balance_after: 10,
          created_at: '2025-10-28T10:00:00Z',
        },
        {
          id: '2',
          type: 'credit_consumed',
          credit_type: 'adventure',
          amount: -1,
          balance_after: 9,
          created_at: '2025-10-28T11:00:00Z',
        },
      ]

      const mockGetHistory = vi.fn().mockResolvedValue(mockTransactions)
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        expect(screen.getByText(/credit added/i)).toBeInTheDocument()
      })

      expect(screen.getByText(/\+5/)).toBeInTheDocument()
      expect(screen.getByText(/-1/)).toBeInTheDocument()
    })

    it('should show loading state', () => {
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: vi.fn(() => new Promise(() => {})), // Never resolves
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      expect(screen.getByText(/loading/i)).toBeInTheDocument()
    })

    it('should show empty state when no transactions', async () => {
      const mockGetHistory = vi.fn().mockResolvedValue([])
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        expect(screen.getByText(/no transactions/i)).toBeInTheDocument()
      })
    })

    it('should handle errors gracefully', async () => {
      const mockGetHistory = vi.fn().mockRejectedValue(new Error('Failed to fetch'))
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        expect(screen.getByText(/failed to load/i)).toBeInTheDocument()
      })
    })
  })

  describe('Transaction Types', () => {
    it('should display purchase transactions with correct styling', async () => {
      const mockTransactions = [
        {
          id: '1',
          type: 'credit_added',
          credit_type: 'purchase',
          amount: 10,
          balance_after: 10,
          created_at: '2025-10-28T10:00:00Z',
        },
      ]

      const mockGetHistory = vi.fn().mockResolvedValue(mockTransactions)
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        const addedCredit = screen.getByText(/\+10/)
        expect(addedCredit).toHaveClass('text-green-600')
      })
    })

    it('should display consumed transactions with correct styling', async () => {
      const mockTransactions = [
        {
          id: '1',
          type: 'credit_consumed',
          credit_type: 'adventure',
          amount: -1,
          balance_after: 9,
          created_at: '2025-10-28T10:00:00Z',
        },
      ]

      const mockGetHistory = vi.fn().mockResolvedValue(mockTransactions)
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        const consumedCredit = screen.getByText(/-1/)
        expect(consumedCredit).toHaveClass('text-red-600')
      })
    })
  })

  describe('Formatting', () => {
    it('should format dates correctly', async () => {
      const mockTransactions = [
        {
          id: '1',
          type: 'credit_added',
          credit_type: 'purchase',
          amount: 5,
          balance_after: 5,
          created_at: '2025-10-28T10:30:00Z',
        },
      ]

      const mockGetHistory = vi.fn().mockResolvedValue(mockTransactions)
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        // Should show relative time (e.g., "2 hours ago") or formatted date
        expect(screen.getByText(/ago|AM|PM/i)).toBeInTheDocument()
      })
    })

    it('should limit transactions by default', async () => {
      const mockGetHistory = vi.fn().mockResolvedValue([])
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" />)

      await waitFor(() => {
        expect(mockGetHistory).toHaveBeenCalledWith('test-user-id', 20)
      })
    })

    it('should accept custom limit prop', async () => {
      const mockGetHistory = vi.fn().mockResolvedValue([])
      vi.mocked(creditManager.CreditManager).mockImplementation(
        () =>
          ({
            getCreditHistory: mockGetHistory,
          }) as any,
      )

      render(<TransactionHistory userId="test-user-id" limit={50} />)

      await waitFor(() => {
        expect(mockGetHistory).toHaveBeenCalledWith('test-user-id', 50)
      })
    })
  })
})
