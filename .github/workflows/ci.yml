name: CI/CD Pipeline

on:
  push:
    branches:
      - '**' # All branches
    paths-ignore:
      - '**.md'
      - 'documentation/**'
      - '.github/workflows/**'
      - 'CLAUDE/**'
      - '.claude/**'
      - '.backups/**'

# Cancel in-progress runs for same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-skip:
    name: Check Skip CI
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}

    steps:
      - id: check
        run: echo "should_run=true" >> $GITHUB_OUTPUT

  # Job 1: Lint & Type Check (Fast)
  lint-and-typecheck:
    name: Lint & Type Check
    needs: check-skip
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript Type Check
        run: npm run typecheck

      - name: Check Formatting
        run: npx prettier --check .

      - name: Run Security Audit (user_id isolation)
        run: ./scripts/security-audit.sh

      - name: Validate File Sizes (300-line limit)
        run: ./scripts/validate-file-size.sh

  # Job 2: Unit & Integration Tests (Vitest)
  test-unit:
    name: Unit & Integration Tests
    needs: check-skip
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run Vitest Tests with Auto-Retry
        timeout-minutes: 12
        run: |
          npm test -- --run --retry=2 --reporter=verbose || TEST_EXIT_CODE=$?

          if [ "${TEST_EXIT_CODE:-0}" = "0" ]; then
            echo "‚úÖ All tests passed (possibly after retries)"
            exit 0
          else
            echo "‚ùå Tests failed even after retries"
            exit ${TEST_EXIT_CODE}
          fi
        env:
          # Supabase Test Environment
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

          # OpenAI (mocked via MSW)
          OPENAI_API_KEY: sk-test-mock-key

          # Stripe (test mode)
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

          # Test flags
          NODE_ENV: test
          INTEGRATION_TESTS: true
          USE_REAL_SUPABASE: true
          IS_TEST_DATABASE: true

      - name: Run Coverage Check
        run: npm run test:coverage
        env:
          # Supabase Test Environment (same as test run above)
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

          # OpenAI (mocked via MSW)
          OPENAI_API_KEY: sk-test-mock-key

          # Test flags
          NODE_ENV: test
          INTEGRATION_TESTS: true
          USE_REAL_SUPABASE: true
          IS_TEST_DATABASE: true

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests

  # Job 3: E2E Tests (Playwright)
  test-e2e:
    name: E2E Tests (Playwright)
    needs: check-skip
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Run Playwright Tests
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
        run: npm run test:e2e

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Job 4: Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck, test-unit]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build Next.js App
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build

  # Job 5: Security Scan
  security:
    name: Security Scan
    needs: check-skip
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high --omit=dev
        continue-on-error: true # Don't fail on audit warnings

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true # Don't block on Snyk issues
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 6: Deploy to Vercel (Production)
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint-and-typecheck, test-unit, test-e2e, build]
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      needs.lint-and-typecheck.result == 'success' &&
      needs.test-unit.result == 'success' &&
      needs.test-e2e.result == 'success' &&
      needs.build.result == 'success'

    steps:
      - name: Deploy to Vercel
        run: |
          echo "üöÄ Deploying to Vercel..."
          RESPONSE=$(curl -X POST -s -w "\n%{http_code}" "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}")
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)

          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "‚úÖ Deployment triggered successfully"
          else
            echo "‚ùå Deployment trigger failed with code $HTTP_CODE"
            exit 1
          fi
